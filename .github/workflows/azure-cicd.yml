name: Azure CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  id-token: write
  contents: read

env:
  AZURE_RESOURCE_GROUP: orryx_collision_avoidance_rg
  AZURE_LOCATION: eastus
  AZURE_CONTAINER_REGISTRY: orryxregistry
  AZURE_WEBAPP_NAME: orryx-fastapi
  AZURE_WEBAPP_FRONTEND: orryx-nextjs
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend image
        run: |
          docker build -t ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/backend:${{ env.IMAGE_TAG }} ./backend

      - name: Build frontend image
        run: |
          docker build -t ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/frontend:${{ env.IMAGE_TAG }} ./frontend

      - name: Ensure Resource Group exists
        uses: azure/CLI@v2
        with:
          inlineScript: |
            az group create --name ${{ env.AZURE_RESOURCE_GROUP }} --location ${{ env.AZURE_LOCATION }}

      - name: Azure CLI - Deploy infra
        uses: azure/CLI@v2
        with:
          inlineScript: |
            az deployment group create \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --template-file infra/main.bicep \
              --parameters location=${{ env.AZURE_LOCATION }} postgresAdminPassword=${{ secrets.POSTGRES_ADMIN_PASSWORD }} \
              --debug
            az deployment group wait --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --created

      - name: Azure CLI - Login to ACR
        uses: azure/CLI@v2
        with:
          inlineScript: |
            az acr login --name ${{ env.AZURE_CONTAINER_REGISTRY }}

      - name: Push images to ACR
        run: |
          docker push ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/backend:${{ env.IMAGE_TAG }}
          docker push ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/frontend:${{ env.IMAGE_TAG }}

      - name: Azure CLI - Deploy backend to Web App
        uses: azure/CLI@v2
        with:
          inlineScript: |
            az webapp config container set \
              --name ${{ env.AZURE_WEBAPP_NAME }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --docker-custom-image-name ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/backend:${{ env.IMAGE_TAG }}

      - name: Azure CLI - Deploy frontend to Web App
        uses: azure/CLI@v2
        with:
          inlineScript: |
            az webapp config container set \
              --name ${{ env.AZURE_WEBAPP_FRONTEND }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --docker-custom-image-name ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/frontend:${{ env.IMAGE_TAG }}

      - name: Logout Azure
        run: az logout
